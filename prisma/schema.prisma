// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    isAdmin       Boolean
    emailVerified DateTime?
    address       String?
    phonenumber   String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          Product[]
    orders        Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String    @id @default(cuid())
    price       Int
    sale        Int?
    stock       Int
    brand       String
    images      Image[]
    name        String
    description String
    category    Category? @relation(fields: [categoryId], references: [id])
    categoryId  String?
    user        User?     @relation(fields: [userId], references: [id])
    userId      String?
    order       Order?    @relation(fields: [orderId], references: [id])
    orderId     String?
    imageURL    String
    isPopular   Boolean?
}

model Image {
    id        String   @id @default(cuid())
    url       String
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?
}

model Category {
    id      String    @id @default(cuid())
    name    String
    product Product[]
}

model Order {
    id       String    @id @default(cuid())
    products Product[]
    user     User?     @relation(fields: [userId], references: [id])
    userId   String?
    status   String
}
